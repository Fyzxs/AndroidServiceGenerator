@* Generator : Template TypeVisibility : Internal *@
@using System
@using System.Collections.Generic
@using System.Linq
@using Parse
@using Razor.Service
@using Razor.Common

@functions {
    public ServiceParser TheService { get; set; }
}
@{
    //const strin wontCompile;
    var list = string.Join(".equals(action) || \r\n                    ", TheService.Actions.ExternalActions.Where(item => item.Source == ExternalAction.BroadcastSource.Android).Select(item => (ClassNames.IntentBase(TheService) + "." + item.FieldName(TheService))));
}

@* Copyright *@
@{
    @(new Copyright().TransformText());
}

@* Package *@
package @{@TheService.Package}.receiver;

@* Imports *@
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;

import com.laskon.stubs.StringUtils;
import @{@TheService.Package}.@{@TheService.Name};
import @{@TheService.Package}.broadcast.@{@ClassNames.IntentBase(TheService)};

/**
 * Listens for Android broadcasts (as opposed to local broadcasts) and redirects desired intents
 * to the @{@TheService.Name}.
 * The manifest will need an entry like
 * <receiver android:name="@{@TheService.Package}.receiver.@{@TheService.Name}Receiver">
 * <intent-filter>
@foreach(string actionValue in TheService.Actions.ExternalActions.Where(item => item.Source == ExternalAction.BroadcastSource.Android).Select(item => item.Value))
    {
@: * <action android:name="@{@actionValue}" />  
}
 * </intent-filter>
 * </receiver>
 *
 */
public final class @{@TheService.Name}Receiver extends BroadcastReceiver {
    @@Override
    public void onReceive(final Context context, final Intent intent) {
        if (null != intent) {
            final String action = intent.getAction();
            if (!StringUtils.isNullOrWhiteSpace(action) && (@{@list}.equals(action))) {
                final Intent i = new Intent(intent);
                i.setComponent(new ComponentName(context, @{@TheService.Name}.class));
                context.startService(i);
            }
        }
    }
}